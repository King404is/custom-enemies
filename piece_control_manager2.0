using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Core }

piece_control_manager := class(creative_device):
    # Editable arrays for locations and spawn pads
    @editable
    Locations : []vector3 = [] # Array of location points

    @editable
    SpawnPads : []creative_device = [] # Array for Spawn Pads (Team 1 & 2)

    @editable
    SpawnPadsTeam3 : []creative_device = [] # Array for Spawn Pads (Team 3)

    # Editable single properties
    @editable
    RandomizeLocations : bool = false # Option to randomize locations

    @editable
    TotalWins : int = 0 # Tracks total wins for players

    @editable
    StartButton : creative_device = creative_device{} # Button to start the game

    @editable
    BarrierDropTimer : creative_device = creative_device{} # Timer for dropping the barrier

    # Variable to track the winning player or team
    private WinningTeam : int = 0

    # Initialization logic
    OnBegin<override>() : void =
        Log("Piece Control Manager Initialized")

        # Optionally randomize locations
        if RandomizeLocations:
            Log("Randomizing Locations...")
            ShuffleLocations()

        # Bind the StartButton to the StartGame function
        StartButton.OnInteractEvent().Subscribe(StartGame)

    # Shuffle locations if RandomizeLocations is true
    ShuffleLocations() : void =
        Locations := RandomizeArray(Locations)
        Log("Locations shuffled.")

    # Start the game
    StartGame() : void =
        Log("Game Started!")
        BarrierDropTimer.Start()
        AssignPlayersToSpawnPads()

        # Logic to begin win tracking
        TrackWins()

    # Assign players to spawn pads
    AssignPlayersToSpawnPads() : void =
        Log("Assigning players to spawn pads...")
        # Placeholder for player assignment
        for (pad : SpawnPads):
            pad.Enable() # Enable spawn pads for team 1 and team 2
        for (pad : SpawnPadsTeam3):
            pad.Enable() # Enable spawn pads for team 3

    # Track wins and update total wins
    TrackWins() : void =
        # Simulate win detection (replace this with actual event binding to a win condition)
        Log("Tracking wins...")

        # Example logic to detect and log wins
        loop:
            Sleep(5.0) # Check win condition every 5 seconds
            WinningTeam := RandomIntInRange(1, 3) # Randomly assign a winning team
            Log("Winning Team: {WinningTeam}")
            TotalWins += 1
            Log("Total Wins: {TotalWins}")

            # End the loop or reset the game after a win
            if TotalWins >= 10: # End game after 10 wins
                EndGame()
                break

    # End the game and reset devices
    EndGame() : void =
        Log("Game Ended! Total Wins: {TotalWins}.")
        ResetDevices()

    # Reset devices to prepare for the next round
    ResetDevices() : void =
        for (pad : SpawnPads):
            pad.Disable()
        for (pad : SpawnPadsTeam3):
            pad.Disable()
        BarrierDropTimer.Reset()
        Log("Devices reset. Ready for the next game.")
