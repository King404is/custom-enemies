using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Core }

piece_control_manager := class(creative_device):
    @editable
    Locations : []vector3 = []
    @editable
    SpawnPads : []creative_device = []
    @editable
    SpawnPadsTeam3 : []creative_device = []
    @editable
    RandomizeLocations : bool = false
    @editable
    TotalWins : int = 0
    @editable
    StartButton : creative_device = creative_device{}
    @editable
    BarrierDropTimer : creative_device = creative_device{}
    @editable
    TeamScoreDisplay : creative_device = creative_device{} # UI for team scores
    @editable
    CelebrationEffects : map<int, creative_device> = {} # Special effects per team
    @editable
    SoundEffects : creative_device = creative_device{} # General sound effects
    @editable
    TeamBarriers : map<int, creative_device> = {} # Barriers for each team
    @editable
    AnnouncementDevice : creative_device = creative_device{} # Victory announcements

    # Private variables
    private TeamScores : map<int, int> = {} # Team scores
    private WinningScore : int = 10 # Score required to win
    private TeamPlayerMap : map<int, []player> = {}

    OnBegin<override>() : void =
        Log("Piece Control Manager Initialized")
        
        if RandomizeLocations:
            ShuffleLocations()

        StartButton.OnInteractEvent().Subscribe(StartGame)

        # Initialize team scores
        for (team : [1, 2, 3]):
            TeamScores[team] := 0

        UpdateScoreDisplay()

    ShuffleLocations() : void =
        Locations := RandomizeArray(Locations)
        Log("Locations shuffled.")

    StartGame() : void =
        Log("Game Started!")
        BarrierDropTimer.Start()
        EnableTeamBarriers()
        AssignPlayersToTeams()
        AssignPlayersToSpawnPads()
        BindPlayerEliminations()

    AssignPlayersToTeams() : void =
        Log("Assigning players to teams...")
        for (player : GetPlayers()):
            team := AssignTeam(player)
            Log("Player {player.GetDisplayName()} assigned to Team {team}")

    AssignTeam(player : player) : int =
        min_team := GetTeamWithFewestPlayers()
        TeamPlayerMap[min_team].Add(player)
        return min_team

    GetTeamWithFewestPlayers() : int =
        min_team := 1
        min_count := 999
        for (team, players : TeamPlayerMap):
            if players.Length() < min_count:
                min_team := team
                min_count := players.Length()
        return min_team

    AssignPlayersToSpawnPads() : void =
        for (team, players : TeamPlayerMap):
            spawn_pads := if team == 3 then SpawnPadsTeam3 else SpawnPads
            for (index, player : players):
                if index < spawn_pads.Length():
                    spawn_pads[index].EnableForPlayer(player)
                    Log("Player assigned to spawn pad {index} for Team {team}")

    EnableTeamBarriers() : void =
        for (team, barrier : TeamBarriers):
            barrier.Enable()
        Log("Team barriers enabled.")

    DisableTeamBarriers() : void =
        for (team, barrier : TeamBarriers):
            barrier.Disable()
        Log("Team barriers disabled.")

    # Bind to player elimination events
    BindPlayerEliminations() : void =
        Log("Binding elimination events...")
        for (player : GetPlayers()):
            player.OnEliminatedEvent().Subscribe(OnPlayerEliminated)

    # Handle player elimination
    OnPlayerEliminated(eliminated_player : player, eliminating_player : player) : void =
        if eliminating_player != none:
            winning_team := GetPlayerTeam(eliminating_player)
            if winning_team != none:
                TeamScores[winning_team] += 1
                Log("Team {winning_team} scored a point! Total: {TeamScores[winning_team]}")
                PlaySoundEffect()
                UpdateScoreDisplay()

                # Check for win condition
                if TeamScores[winning_team] >= WinningScore:
                    TrackWins(winning_team)

    # Determine player's team
    GetPlayerTeam(player : player) : int =
        for (team, players : TeamPlayerMap):
            if players.Contains(player):
                return team
        return none

    # Update score display
    UpdateScoreDisplay() : void =
        score_text := "Scores:\n"
        for (team, score : TeamScores):
            score_text += "Team {team}: {score}\n"
        TeamScoreDisplay.SetText(score_text)

    # Play a sound effect for scoring
    PlaySoundEffect() : void =
        SoundEffects.Activate()
        Log("Sound effect played.")

    TrackWins(winning_team : int) : void =
        Log("Team {winning_team} wins!")
        TotalWins += 1
        TriggerVictoryEffects(winning_team)
        MakeVictoryAnnouncement(winning_team)
        EndGame(winning_team)

    TriggerVictoryEffects(winning_team : int) : void =
        if CelebrationEffects.HasKey(winning_team):
            CelebrationEffects[winning_team].Activate()
            Log("Celebration effects triggered for Team {winning_team}.")

        DisableTeamBarriers() # Drop barriers for celebration

    MakeVictoryAnnouncement(winning_team : int) : void =
        announcement_text := "Congratulations Team {winning_team}! You win!"
        AnnouncementDevice.SetText(announcement_text)
        AnnouncementDevice.Activate()
        Log("Victory announcement made.")

    EndGame(winning_team : int) : void =
        Log("Game Ended! Team {winning_team} wins! Total Wins: {TotalWins}")
        ResetDevices()

    ResetDevices() : void =
        for (pad : SpawnPads):
            pad.Disable()
        for (pad : SpawnPadsTeam3):
            pad.Disable()
        BarrierDropTimer.Reset()
        for (team : TeamScores.Keys()):
            TeamScores[team] := 0
        DisableTeamBarriers()
        UpdateScoreDisplay()
        Log("Devices reset. Ready for the next game.")
